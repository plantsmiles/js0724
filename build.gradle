plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'com.avast.gradle.docker-compose' version '0.14.9'
}

repositories {
	mavenCentral()
}

group = 'com.js0724'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

dependencies {
	implementation("io.github.cdimascio:dotenv-java:3.0.0")
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	runtimeOnly("org.postgresql:postgresql")
    testImplementation 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.10.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

tasks.named('test') {
	useJUnitPlatform()
    systemProperty 'spring.config.location', 'src/test/resources/application-test.properties'
}

// In a real world scenario, we wouldn't run the ToolRentalApplicationTests as part of the test task, 
// we would run the tests in a seperate integration or e2e test task to keep builds fast and run before PR or in CI

// I would also setup up some type of test coverage report task, can be a vanity metric but its good to know how much of the code is being tested and to find holes